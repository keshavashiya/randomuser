{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","user","fetch","then","response","json","responseJson","setState","console","log","results","gender","catch","error","style","padding","display","flexDirection","justifyContent","alignItems","this","src","picture","large","alt","name","title","first","last","email","dob","date","age","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,MAHS,E,iFAOE,IAAD,OAClBC,MAAM,8BACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,EAAKC,SAAS,CACZN,KAAMK,IAERE,QAAQC,IAAI,EAAKT,MAAMC,KAAKS,QAAQ,GAAGC,UAExCC,MAAM,SAAAC,GACLL,QAAQK,MAAMA,O,+BAKlB,OACE,yBACEC,MAAO,CACLC,QAAS,GACTC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WAGbC,KAAKpB,MAAMC,KACV,6BACE,6BACE,4CAEF,yBAAKa,MAAO,CAAEE,QAAS,OAAQC,cAAe,QAC5C,yBACEH,MAAO,CACLG,cAAe,SACfC,eAAgB,OAChBH,QAAS,KAGX,yBACEM,IAAKD,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGY,QAAQC,MACxCC,IAAI,UAGR,yBACEV,MAAO,CACLG,cAAe,SACfC,eAAgB,QAChBH,QAAS,KAGX,yBAAKD,MAAO,CAAEE,QAAS,OAAQC,cAAe,QAC5C,4BACGG,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGe,KAAKC,MADnC,oBAIA,4BACGN,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGe,KAAKE,MADnC,oBAIA,4BACGP,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGe,KAAKG,KADnC,qBAKF,4BAAKR,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGmB,SAGpC,yBAAKf,MAAO,CAAEE,QAAS,OAAQC,cAAe,QAC5C,yBACEH,MAAO,CACLG,cAAe,SACfC,eAAgB,OAChBH,QAAS,KAGX,4BAAKK,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGC,SAElC,yBACEG,MAAO,CACLG,cAAe,SACfC,eAAgB,QAChBH,QAAS,KAGX,yBAAKD,MAAO,CAAEE,QAAS,OAAQC,cAAe,QAC5C,4BACGG,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGoB,IAAIC,KADlC,oBAIA,4BACGX,KAAKpB,MAAMC,KAAKS,QAAQ,GAAGoB,IAAIE,IADlC,wBAQR,yBAAKlB,MAAO,CAACE,QAAS,OAAQC,cAAe,MAAOC,eAAgB,SAAUe,UAAW,WACvF,6C,GA1GqBC,aCUbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,gB","file":"static/js/main.cdd66225.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.randomuser.me/\")\n      .then(response => response.json())\n      .then(responseJson => {\n        this.setState({\n          user: responseJson\n        });\n        console.log(this.state.user.results[0].gender);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          padding: 32,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        {this.state.user ? (\n          <div>\n            <div>\n              <h1>Random User</h1>\n            </div>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <div\n                style={{\n                  flexDirection: \"column\",\n                  justifyContent: \"left\",\n                  padding: 12\n                }}\n              >\n                <img\n                  src={this.state.user.results[0].picture.large}\n                  alt=\"golf\"\n                />\n              </div>\n              <div\n                style={{\n                  flexDirection: \"column\",\n                  justifyContent: \"right\",\n                  padding: 12\n                }}\n              >\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                  <h5>\n                    {this.state.user.results[0].name.title}\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                  </h5>\n                  <h5>\n                    {this.state.user.results[0].name.first}\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                  </h5>\n                  <h5>\n                    {this.state.user.results[0].name.last}\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                  </h5>\n                </div>\n                <h5>{this.state.user.results[0].email}</h5>\n              </div>\n            </div>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <div\n                style={{\n                  flexDirection: \"column\",\n                  justifyContent: \"left\",\n                  padding: 12\n                }}\n              >\n                <h5>{this.state.user.results[0].gender}</h5>\n              </div>\n              <div\n                style={{\n                  flexDirection: \"column\",\n                  justifyContent: \"right\",\n                  padding: 12\n                }}\n              >\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                  <h5>\n                    {this.state.user.results[0].dob.date}\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                  </h5>\n                  <h5>\n                    {this.state.user.results[0].dob.age}&nbsp;&nbsp;&nbsp;&nbsp;\n                  </h5>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", textAlign: \"center\"}}>\n            <h6>Loading</h6>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}