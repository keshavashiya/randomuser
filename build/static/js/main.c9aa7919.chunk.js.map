{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","user","fetch","then","response","json","responseJson","setState","catch","error","console","style","padding","display","flexDirection","justifyContent","alignItems","this","src","results","picture","large","alt","name","title","first","last","phone","cell","email","gender","dob","date","age","location","street","number","city","postcode","coordinates","latitude","longitude","timezone","offset","description","id","value","textAlign","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9aa7919.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.randomuser.me/\")\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({\r\n          user: responseJson\r\n        });\r\n        // console.log(this.state.user.results[0].gender);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          padding: 32,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        {this.state.user ? (\r\n          <div>\r\n            <div>\r\n              <h1>Random User</h1>\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n              <div\r\n                style={{\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"left\",\r\n                  padding: 12\r\n                }}\r\n              >\r\n                <img\r\n                  src={this.state.user.results[0].picture.large}\r\n                  alt=\"golf\"\r\n                />\r\n              </div>\r\n              <div\r\n                style={{\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"right\",\r\n                  padding: 12\r\n                }}\r\n              >\r\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                  <h5>Name : &nbsp;</h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].name.title}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].name.first}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].name.last}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                </div>\r\n                <h5>Mobile: &nbsp;{this.state.user.results[0].phone}</h5>\r\n                <h5>Cell: &nbsp;{this.state.user.results[0].cell}</h5>\r\n                <h5>email : &nbsp;{this.state.user.results[0].email}</h5>\r\n                <h5>gender : &nbsp;{this.state.user.results[0].gender}</h5>\r\n                <h5>\r\n                  Date of Birth : &nbsp;{this.state.user.results[0].dob.date}\r\n                  &nbsp;&nbsp;&nbsp;&nbsp;\r\n                </h5>\r\n                <h5>\r\n                  Age : &nbsp;{this.state.user.results[0].dob.age}&nbsp;&nbsp;&nbsp;&nbsp;\r\n                </h5>\r\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                  <h5>Address : &nbsp;</h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.street.number}{\",\"}{this.state.user.results[0].location.street.name}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.city}{\",\"}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.state}{\",\"}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.postcode}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                  <h5>Location : &nbsp;</h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.coordinates.latitude}{\",\"}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.coordinates.longitude}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                  <h5>Time zone : &nbsp;</h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.timezone.offset}{\",\"}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].location.timezone.description}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                </div>\r\n                <h5>{this.state.user.results[0].id.name} : {this.state.user.results[0].id.value}</h5>\r\n              </div>\r\n            </div>\r\n            {/* <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n              <div\r\n                style={{\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"left\",\r\n                  padding: 12\r\n                }}\r\n              >\r\n                <h5>gender : &nbsp;{this.state.user.results[0].gender}</h5>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"right\",\r\n                  padding: 12\r\n                }}\r\n              >\r\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                  <h5>\r\n                    {this.state.user.results[0].dob.date}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                  <h5>\r\n                    {this.state.user.results[0].dob.age}&nbsp;&nbsp;&nbsp;&nbsp;\r\n                  </h5>\r\n                </div>\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            <h6>Loading</h6>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}